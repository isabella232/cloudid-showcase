apply plugin: 'base'

buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }

    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    group = 'de.qaware.cloudid'
    version = '0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'propdeps'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    //apply plugin: 'jacoco'

//    plugins {
//        id 'org.sonarqube' version '2.6.2'
//    }

    repositories {
        mavenCentral()
    }

    ext {
        lombokVersion = '1.16.20'
    }

    dependencies {
        // Lombok
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

        // Spock tests
        testCompile "org.codehaus.groovy:groovy-all:2.4.13"
        testCompile "org.spockframework:spock-core:1.1-groovy-2.4"


        testCompile "org.hamcrest:hamcrest-core:1.3"
        testRuntime "net.bytebuddy:byte-buddy:1.6.5"
        testRuntime "org.objenesis:objenesis:2.5.1"

        // WireMock
        // Use standalone as WireMock depends on an outdated version of Jetty that clashes with Spring Boot
        testCompile "com.github.tomakehurst:wiremock-standalone:2.14.0"
    }

    sourceSets {
        test {
            java {
                srcDirs = []
            }
            groovy {
                srcDirs 'src/test/java'
            }
        }
    }

//    jacoco {
//        toolVersion = "0.8.0"
//    }
//
//    jacocoTestReport {
//        reports {
//            xml.enabled true
//            csv.enabled false
//            html.enabled true
//        }
//    }

//    sonarqube {
//        properties {
//            property 'sonar.exclusions', '**/*Generated.java, build/generated/**'
//            property 'sonar.projectName', 'Cloud ID SPIRE cloudid'
//
//            property 'sonar.issue.ignore.multicriteria', 'e1,e2,e3'
//
//            // Rule attempts to enforce consistent logger field names, but is broken as it also triggers on variables.
//            property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'squid:S1312'
//            property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**'
//
//            // Rule disallows wildcard import which clashes with IntelliJ presets
//            property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'squid:S2208'
//            property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**'
//
//            // Rule attempts to identify hardcoded passwords by identifying certain field names
//            // but produces massive amounts of false positives
//            property 'sonar.issue.ignore.multicriteria.e3.ruleKey', 'squid:S2068'
//            property 'sonar.issue.ignore.multicriteria.e3.resourceKey', '**'
//        }
//    }


}


